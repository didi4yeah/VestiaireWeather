apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    //To work with java 8 (lambdas...)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //To avoid duplicates files
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        applicationId "com.didi.vestiaireweather"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //Has to use new compiler to use java 8, but instant run wont be available then...
        jackOptions {
            enabled true
        }
    }

    //Before buildTypes so it will work ;)
    signingConfigs {
        debug {
            storeFile file('../configuration/debug.keystore')
        }

        release {
            //TODO Create release keystore when needed
            storeFile file('../configuration/release.keystore')
            storePassword "ChoosePassword"
            keyAlias "vestiaire"
            keyPassword "ChoosePassword"
        }
    }

    buildTypes {
        //Meant to be used while developing
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        //Meant to be used when publishing on store
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //Future unit testing requirements
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    //Support libraries
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'

    //Architecture
    compile 'com.tinmegali.mvp:mvp:0.0.7'
    compile 'io.reactivex:rxandroid:1.2.1'
    //Because RxAndroid releases are few and far between, it is recommended you also
    //explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.6'

    //Efficiency tools
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    //Design tools
    compile "com.mikepenz:iconics-core:2.8.1@aar"
    compile 'com.mikepenz:weather-icons-typeface:2.0.10.2@aar'

    //Network tools
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0' //To use RxJava with Retrofit

    //Debug tools
    compile 'com.facebook.stetho:stetho:1.4.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'
}

//task to launch in specific config chosen
task startDevDebug(type: Exec, dependsOn: ':app:installDebug') {
    //Mac OS
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr -> properties.load(instr)
        }

        def sdkDir = properties.getProperty('sdk.dir')
        def adb = "$sdkDir/platform-tools/adb"
        commandLine "$adb", 'shell', 'am', 'start', '-n', 'didi.com.basearchi/didi.com.basearchi.activity.SplashActivity'
    }
}